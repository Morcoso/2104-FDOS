
import com.mysql.jdbc.PreparedStatement;
import com.mysql.jdbc.ResultSetMetaData;
import com.mysql.jdbc.Statement;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import java.sql.ResultSet;
import javax.swing.JOptionPane;

public class Menugui extends javax.swing.JFrame {

    public Menugui() {
        initComponents();
        this.setLocationRelativeTo(null);
        Connect();
        Fetch();
    }
     Connection con;
    PreparedStatement pst;
    ResultSet rs;
     
    public void Connect(){
        try{
            Class.forName("com.mysql.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost/food", "root", "");
            
        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(Menugui.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void addListeners() {
      
        ActionListener[] actionListeners = ADD.getActionListeners();
            boolean isListenerAlreadyAdded = false;
            for (ActionListener listener : actionListeners) {
                if (listener instanceof java.awt.event.ActionListener) {
                    isListenerAlreadyAdded = true;
                    break;
                }
            }    

            if (!isListenerAlreadyAdded) {
            } 
    }
    
               
    private void Fetch(){
        try {
            int q;
            pst = (PreparedStatement) con.prepareStatement("SELECT * FROM product");
            rs = pst.executeQuery();
            ResultSetMetaData rss = (ResultSetMetaData) rs.getMetaData();
            q = rss.getColumnCount();
            
            DefaultTableModel df = (DefaultTableModel)MenuTable.getModel();
            df.setRowCount(0);
            while(rs.next()){
                Vector v2 = new Vector();
                for(int a=1; a<= q; a++){
                    v2.add(rs.getString("ProductID"));
                    v2.add(rs.getString("ProductName"));
                    v2.add(rs.getString("Price"));
                }
                df.addRow(v2);
            }
        } catch (SQLException ex) {
            Logger.getLogger(Menugui.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 32767));
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        MenuTable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        OrderTable = new javax.swing.JTable();
        DEl = new javax.swing.JButton();
        ADD = new javax.swing.JButton();
        Pay = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        SQuantity = new javax.swing.JSpinner();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(0, 102, 51));
        jPanel1.setToolTipText("");
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Stencil", 2, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("MENU");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 60, 73, -1));

        MenuTable.setBackground(new java.awt.Color(204, 204, 204));
        MenuTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "ID", "Name", "Price"
            }
        ));
        MenuTable.setColumnSelectionAllowed(true);
        jScrollPane2.setViewportView(MenuTable);
        MenuTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        jPanel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 100, 680, 520));

        jLabel2.setFont(new java.awt.Font("Stencil", 2, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Order");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(990, 60, 80, -1));

        OrderTable.setBackground(new java.awt.Color(204, 204, 204));
        OrderTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null}
            },
            new String [] {
                "ID", "Name", "Quantity", "Price"
            }
        ));
        jScrollPane1.setViewportView(OrderTable);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 110, 640, 510));

        DEl.setBackground(new java.awt.Color(153, 153, 153));
        DEl.setFont(new java.awt.Font("Segoe UI Black", 1, 12)); // NOI18N
        DEl.setIcon(new javax.swing.ImageIcon(getClass().getResource("/delete.png"))); // NOI18N
        DEl.setText("Delete");
        DEl.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        DEl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DElActionPerformed(evt);
            }
        });
        jPanel1.add(DEl, new org.netbeans.lib.awtextra.AbsoluteConstraints(1110, 660, 90, 40));

        ADD.setBackground(new java.awt.Color(153, 153, 153));
        ADD.setFont(new java.awt.Font("Segoe UI Black", 1, 12)); // NOI18N
        ADD.setIcon(new javax.swing.ImageIcon(getClass().getResource("/add to cart.png"))); // NOI18N
        ADD.setText("Add");
        ADD.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        ADD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ADDActionPerformed(evt);
            }
        });
        jPanel1.add(ADD, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 660, 90, 40));

        Pay.setBackground(new java.awt.Color(153, 153, 153));
        Pay.setFont(new java.awt.Font("Segoe UI Black", 1, 12)); // NOI18N
        Pay.setIcon(new javax.swing.ImageIcon(getClass().getResource("/place order.png"))); // NOI18N
        Pay.setText("Payment");
        Pay.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        Pay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PayActionPerformed(evt);
            }
        });
        jPanel1.add(Pay, new org.netbeans.lib.awtextra.AbsoluteConstraints(1250, 660, 104, 40));

        jLabel3.setBackground(new java.awt.Color(153, 153, 153));
        jLabel3.setFont(new java.awt.Font("Stencil", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Quantity:");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 660, 100, 30));
        jPanel1.add(SQuantity, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 660, 90, 30));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1370, 770));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    
    
    private int getNextTransactID() {
    int transactID = 1;  // Default value

    try (Connection con = DriverManager.getConnection("jdbc:mysql://localhost/food", "root", "");
         Statement stmt = (Statement) con.createStatement()) {
        
        // Query to get the highest transactID from the orders table
        String query = "SELECT MAX(transactID) FROM orders";
        ResultSet rs = stmt.executeQuery(query);

        if (rs.next()) {
            transactID = rs.getInt(1) + 1;  // Increment the highest transactID
        }
    } catch (SQLException e) {
        e.printStackTrace();
    }
    
    return transactID;
}
    
    private void PayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PayActionPerformed

        
        int transactID = getNextTransactID();
        
        
        

        DefaultTableModel cartTableModel = (DefaultTableModel) OrderTable.getModel();
        int numRows = cartTableModel.getRowCount();

        String url = "jdbc:mysql://localhost:3306/food";
        String user = "root";
        String password = "";

        try (Connection connection = DriverManager.getConnection(url, user, password)) {
            String sql = "INSERT INTO `sales` (`ProductID`, `Name`, `quantity`, `price`) VALUES (?,?,?,?)";

            try (PreparedStatement preparedStatement = (PreparedStatement) connection.prepareStatement(sql)) {
                for (int i = 1; i < numRows; i++) {
                    Object dishID = OrderTable.getValueAt(i, 0);
                    Object dishName = OrderTable.getValueAt(i,1);
                    Object quantity = OrderTable.getValueAt(i, 2);
                    Object price = OrderTable.getValueAt(i, 3);

                    preparedStatement.setString(1, (String) dishID);
                    preparedStatement.setString(2, (String) dishName);
                    preparedStatement.setObject(3, quantity);
                    preparedStatement.setObject(4, price);

                    preparedStatement.executeUpdate();
                    
                    insertOrderIntoDatabase(transactID, dishID, dishName, price, quantity);
                }

                System.out.println("Data inserted into the sales database successfully.");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        
        Paymentgui pay = new Paymentgui();
        pay.show();
        dispose();
        
        
    }//GEN-LAST:event_PayActionPerformed

    private void ADDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ADDActionPerformed
        int selectedRow = MenuTable.getSelectedRow();

        if (selectedRow != -1) {
            try {
                Object ProductID = MenuTable.getValueAt(selectedRow, 0);
                Object Name = MenuTable.getValueAt(selectedRow, 1);
                Object Quantity = SQuantity.getValue();
                Object Price = MenuTable.getValueAt(selectedRow, 2);

                DefaultTableModel orderModel = (DefaultTableModel) OrderTable.getModel();
                orderModel.addRow(new Object[]{ProductID, Name, Quantity, Price});

                
            } catch (Exception e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Error adding the order: " + e.getMessage());
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please select a dish from the menu.");
        }
    }//GEN-LAST:event_ADDActionPerformed

    private void DElActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DElActionPerformed
        // TODO add your handling code here:
        int selectedRow = OrderTable.getSelectedRow();

        if (selectedRow != -1) {
            DefaultTableModel orderModel = (DefaultTableModel) OrderTable.getModel();
            Object productID = OrderTable.getValueAt(selectedRow, 0);
            orderModel.removeRow(selectedRow);
            deleteOrderFromDatabase(productID);
        } else {
            JOptionPane.showMessageDialog(this, "Please select a row to delete.", "No Row Selected", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_DElActionPerformed
    private void deleteOrderFromDatabase(Object productID) {
    try {
        Class.forName("com.mysql.jdbc.Driver");
        Connection con = DriverManager.getConnection("jdbc:mysql://localhost/food", "root", "");

        String query = "DELETE FROM orders WHERE ProductID = ?";
        PreparedStatement pst = (PreparedStatement) con.prepareStatement(query);
        pst.setObject(1, productID);

        int rowsAffected = pst.executeUpdate();

        if (rowsAffected > 0) {
            JOptionPane.showMessageDialog(this, "Order deleted from database successfully!");
        } else {
            JOptionPane.showMessageDialog(this, "Failed to delete order from database.");
        }

        pst.close();
        con.close();
    } catch (ClassNotFoundException | SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error deleting order from database: " + e.getMessage());
    }
}
    private void insertOrderIntoDatabase(int transactID, Object productID, Object name, Object price, Object quantity) {
    try {
        Class.forName("com.mysql.jdbc.Driver");
        Connection con = DriverManager.getConnection("jdbc:mysql://localhost/food", "root", "");

        // Insert the new order into the database with the transactID
        String query = "INSERT INTO orders (transactID, ProductID, Name, Price, Quantity) VALUES (?, ?, ?, ?, ?)";
        PreparedStatement pst = (PreparedStatement) con.prepareStatement(query);
        pst.setInt(1, transactID);  // Set the transactID
        pst.setObject(2, productID);
        pst.setObject(3, name);
        pst.setObject(4, price);
        pst.setObject(5, quantity);

        int rowsAffected = pst.executeUpdate();

        if (rowsAffected > 0) {
            JOptionPane.showMessageDialog(this, "Order added to database successfully!");
        } else {
            JOptionPane.showMessageDialog(this, "Failed to add order to database.");
        }

        pst.close();
        con.close();
    } catch (ClassNotFoundException | SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error adding order to database: " + e.getMessage());
    }
}


    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Menugui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Menugui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Menugui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Menugui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Menugui().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ADD;
    private javax.swing.JButton DEl;
    private javax.swing.JTable MenuTable;
    private javax.swing.JTable OrderTable;
    private javax.swing.JButton Pay;
    private javax.swing.JSpinner SQuantity;
    private javax.swing.Box.Filler filler1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
} 

  
